<?php

namespace Efrei\DoorBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * AccessRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AccessRepository extends EntityRepository
{
	public function checkAccess($door, $card, $day) {
		
	
		$qb = $this->createQueryBuilder('Access')
					
					->where('Access.card = :card')
					->setParameter('card', $card)
					
					->andwhere('Access.door = :door')
					->setParameter('door', $door)
					
					->andwhere('Access.fromdate <= :fromdate OR Access.fromdate is NULL')
					->setParameter('fromdate', date('Y-m-d H:i:s', time()))
					
					->andwhere('Access.todate >= :todate OR Access.todate is NULL')
					->setParameter('todate', date('Y-m-d H:i:s', time()))
				
					->andwhere('(Access.fromtime <= :fromtime OR Access.fromtime is NULL)')
					->setParameter('fromtime', new \DateTime())
					->andwhere('(Access.totime >= :totime OR Access.totime is NULL)')
					->setParameter('totime', new \DateTime())
				
					->andwhere('Access.days LIKE :day OR Access.days LIKE :emptyday')
					
					->setParameter('day', '%'.$day.'%')
					->setParameter('emptyday', 'a:0:{}')
					
					
					
				//	->andwhere('(j.day = :day OR j.day is NULL)')
				//	->setParameter('day', date('l', time()))
				//	->andwhere('(j.fromtime >= :fromtime OR j.fromtime is NULL)')
				//	->setParameter('fromtime', date('H:i:s', time()))
				//	->andwhere('(j.totime <= :totime OR j.totime is NULL)')
				//	->setParameter('totime', date('H:i:s', time()))
		; 
			
		$query = $qb->getQuery();
		
		
		return $query->getResult();
	}
	
	public function AccessDoor($door, $card) {
		
		
		$qb = $this->createQueryBuilder('Access')
					//->leftJoin('Card.accesses', 'Access')
					->where('Access.door = :door')
					->setParameter('door', $door)
					->andwhere('Access.card = :card')
					->setParameter('card', $card)
					->andwhere('Access.active = 1')
				
		;
		
		
			
		$query = $qb->getQuery();
		
		
		return $query->getResult();
	}
}
